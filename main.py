from operations import (
    union, intersection, difference, symmetric_diff, complement,
    cartesian_product, relation_matrix, print_matrix,
    composition_matrix
)
# def ordered(result_set, universe_list):
#     """–ü–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ result_set —É –ø–æ—Ä—è–¥–∫—É, —è–∫ —É universe_list"""
#     return [el for el in universe_list if el in result_set]

def smart_cast(x: str):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î –µ–ª–µ–º–µ–Ω—Ç –Ω–∞ int, —è–∫—â–æ —Ü–µ —á–∏—Å–ª–æ, —ñ–Ω–∞–∫—à–µ –ª–∏—à–∞—î —è–∫ —Ä—è–¥–æ–∫"""
    try:
        return int(x)
    except ValueError:
        return x

def read_list(prompt):
    """–ó—á–∏—Ç—É–≤–∞–Ω–Ω—è –º–Ω–æ–∂–∏–Ω–∏ —è–∫ —Å–ø–∏—Å–∫—É (–∑–±–µ—Ä—ñ–≥–∞—î –ø–æ—Ä—è–¥–æ–∫)"""
    raw = input(prompt).strip()
    if not raw:
        return []
    return [smart_cast(el) for el in raw.split()]

def to_set(lst):
    """–ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î —Å–ø–∏—Å–æ–∫ —É –º–Ω–æ–∂–∏–Ω—É (–¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π)"""
    return set(lst)

if __name__ == "__main__":
    print("üßÆ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ù–Ü –û–ü–ï–†–ê–¶–Ü–á –ù–ê–î –ú–ù–û–ñ–ò–ù–ê–ú–ò üßÆ\n")

    U_list = read_list("–í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—É –º–Ω–æ–∂–∏–Ω—É U (–µ–ª–µ–º–µ–Ω—Ç–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª): ")
    A_list = read_list("–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–∏–Ω—É A: ")
    B_list = read_list("–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–∏–Ω—É B: ")
    C_list = read_list("–í–≤–µ–¥—ñ—Ç—å –º–Ω–æ–∂–∏–Ω—É C: ")

    U, A, B, C = to_set(U_list), to_set(A_list), to_set(B_list), to_set(C_list)

    print("\n–í–∏—Ö—ñ–¥–Ω—ñ –º–Ω–æ–∂–∏–Ω–∏")
    print("U =", "{" + ", ".join(map(str, U_list)) + "}")
    print("A =", "{" + ", ".join(map(str, A_list)) + "}")
    print("B =", "{" + ", ".join(map(str, B_list)) + "}")
    print("C =", "{" + ", ".join(map(str, C_list)) + "}")

    print("\n--- –û–ø–µ—Ä–∞—Ü—ñ—ó –Ω–∞–¥ –º–Ω–æ–∂–∏–Ω–∞–º–∏ ---")
    print("A ‚à™ B =", sorted(union(A, B)))
    print("A ‚à© B =", sorted(intersection(A, B)))
    print("A \\ B =", sorted(difference(A, B)))
    print("B \\ A =", sorted(difference(B, A)))
    print("A ‚äï B =", sorted(symmetric_diff(A, B)))
    print("¬¨A =", sorted(complement(A, U)))
    print("¬¨B =", sorted(complement(B, U)))

    print("\n--- –î–µ–∫–∞—Ä—Ç–æ–≤—ñ –¥–æ–±—É—Ç–∫–∏ ---")
    print("A √ó B =", cartesian_product(A_list, B_list))
    print("\n")
    print("A¬≤ =", cartesian_product(A_list, A_list))
    print("\n")
    print("B¬≤ =", cartesian_product(B_list, B_list))
    print("\n")
    print("A¬≤ √ó B¬≤ =", cartesian_product(cartesian_product(A_list, A_list),
                                        cartesian_product(B_list, B_list)))

    print("\n--- –ë—ñ–Ω–∞—Ä–Ω–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è R ‚äÜ A√óB (A == B) ---")

    R = relation_matrix(A_list, B_list, lambda a, b: a == b)
    print_matrix(R, A_list, B_list)

    print("\n--- –ë—ñ–Ω–∞—Ä–Ω–µ –≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è S ‚äÜ B√óC (B == C) ---")
        
    S = relation_matrix(B_list, C_list, lambda b, c: str(b)[0] == str(c)[0])
    print_matrix(S, B_list, C_list)

    print("\n--- –ö–æ–º–ø–æ–∑–∏—Ü—ñ—è S‚àòR ---")
    SR = composition_matrix(R, S)
    print_matrix(SR, A_list, C_list)